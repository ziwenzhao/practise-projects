public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        for(int i=0;i<intervals.size();i++){
        	if(intervals.get(i).start>=newInterval.start){
        		
        		if(i>=1 && newInterval.start<=intervals.get(i-1).end){
        			intervals.set(i-1, new Interval(intervals.get(i-1).start,Math.max(newInterval.end, intervals.get(i-1).end)));
        			while(i<intervals.size() && intervals.get(i).start<=intervals.get(i-1).end){
        				intervals.set(i-1, new Interval(intervals.get(i-1).start,Math.max(intervals.get(i-1).end, intervals.get(i).end)));
        				intervals.remove(i);
        			}
        		}else if(newInterval.end>=intervals.get(i).start){
        			intervals.set(i, new Interval(newInterval.start,Math.max(newInterval.end, intervals.get(i).end)));
        			while(i+1<intervals.size() && intervals.get(i).end>=intervals.get(i+1).start){
        				intervals.set(i, new Interval(intervals.get(i).start,Math.max(intervals.get(i+1).end,intervals.get(i).end)));
        				intervals.remove(i+1);
        			}
        		}else{
        			intervals.add(i, newInterval);
        		}
        		return intervals;
        	}
        }
        if(intervals.size()>0 && newInterval.start<=intervals.get(intervals.size()-1).end){
        	intervals.set(intervals.size()-1, new Interval(intervals.get(intervals.size()-1).start,Math.max(newInterval.end, intervals.get(intervals.size()-1).end)));
        }else{
        	intervals.add(newInterval);
        }
        return intervals;
    }
}
