public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> list=new ArrayList<>();
        backtrack(list,new ArrayList<>(),new ArrayList<Integer>(),nums);
        return list;
    }

	private void backtrack(List<List<Integer>> list, ArrayList<Integer> tempList, List<Integer> idx, int[] nums) {
		// TODO Auto-generated method stub
		if(tempList.size()==nums.length ){
			list.add(new ArrayList<Integer>(tempList));
		}else{
			ArrayList<Integer> addlist=new ArrayList<Integer>();
			for(int i=0;i<nums.length;i++){
				if(idx.contains(i)|| addlist.contains(nums[i])) continue;
				else{
					addlist.add(nums[i]);
					tempList.add(nums[i]);
					idx.add(i);
					backtrack(list, tempList, idx, nums);
					tempList.remove(tempList.size()-1);
					idx.remove(idx.size()-1);
				}
			}
		}
		
	}
    
}
